"use client"

import React, { useState, useEffect } from "react"
import Image from "next/image"
import Link from "next/link"
import { motion, useAnimation, AnimatePresence, useTransform, useSpring, useMotionValue } from "framer-motion"
import { Menu, Bell, ArrowRight, X, Newspaper, Calendar, Shield, AlertTriangle, FileText, BadgeCheck, Flame, Phone } from "lucide-react"
import CountUp from 'react-countup'
import { useTheme } from 'next-themes'

const stats = [
  {
    value: 32,
    label: "품질 인증",
    suffix: "건",
    gradient: "from-blue-500 to-sky-500 dark:from-red-500 dark:to-orange-500"
  },
  {
    value: 1500,
    label: "고객사",
    suffix: "+",
    gradient: "from-green-500 to-emerald-500 dark:from-orange-500 dark:to-amber-500"
  },
  {
    value: 25,
    label: "수출 국가",
    suffix: "개국",
    gradient: "from-amber-500 to-yellow-500 dark:from-emerald-500 dark:to-green-500"
  },
  {
    value: 98,
    label: "고객 만족도",
    suffix: "%",
    gradient: "from-purple-500 to-violet-500 dark:from-blue-500 dark:to-indigo-500"
  }
]

interface Notice {
  id: number
  title: string
  date: string
  category: string
}

interface NewsItem {
  id: number
  title: string
  date: string
  source: string
}

interface Event {
  id: number
  title: string
  date: string
  location: string
}

const notices: Notice[] = [
  {
    id: 1,
    title: "서한에프앤씨 홈페이지가 새롭게 오픈했습니다",
    date: "2023-12-15",
    category: "일반",
  },
  {
    id: 2,
    title: "2024년 소방 설비 신제품 출시 안내",
    date: "2023-12-10",
    category: "제품",
  },
  {
    id: 3,
    title: "연말 휴무 안내 (12/30~1/2)",
    date: "2023-12-05",
    category: "일반",
  },
]

const news: NewsItem[] = [
  {
    id: 1,
    title: "서한에프앤씨, 2023 소방산업대상 수상",
    date: "2023-12-12",
    source: "소방뉴스",
  },
  {
    id: 2,
    title: "서한에프앤씨, 해외 시장 진출 확대 계획 발표",
    date: "2023-12-05",
    source: "경제신문",
  },
  {
    id: 3,
    title: "소방 설비 시장, 2024년 성장세 전망",
    date: "2023-11-30",
    source: "산업일보",
  },
]

const events: Event[] = [
  {
    id: 1,
    title: "2024 소방 안전 박람회 참가",
    date: "2024-03-15",
    location: "서울 코엑스",
  },
  {
    id: 2,
    title: "신제품 발표회",
    date: "2024-02-20",
    location: "서한에프앤씨 본사",
  },
  {
    id: 3,
    title: "소방 설비 기술 세미나",
    date: "2024-01-25",
    location: "서울 JW 메리어트",
  },
]

const combinedItems = [
  ...notices.map(notice => ({
    id: notice.id,
    title: notice.title,
    description: notice.title,
    date: notice.date,
    category: notice.category,
    type: '공지사항'
  })),
  ...news.map(item => ({
    id: item.id,
    title: item.title,
    description: item.title,
    date: item.date,
    category: item.source,
    type: '뉴스'
  })),
  ...events.map(event => ({
    id: event.id,
    title: event.title,
    description: event.title,
    date: event.date,
    category: event.location,
    type: '일정'
  })),
]

interface MenuItem {
  id?: number
  icon: React.ReactNode
  title: string
  description: string
  link: string
  content?: {
    title: string
    subtitle: string
    items: Array<{
      id: number
      title: string
      description?: string
      date?: string
      category?: string
      link?: string
    }>
  }
}

const menuItems: MenuItem[] = [
  {
    id: 1,
    icon: <Flame className="w-10 h-10 md:w-12 md:h-12" />,
    title: "소방설비",
    description: "최신 소방 설비 및 시스템",
    link: "/products/fire",
    content: {
      title: "소방설비",
      subtitle: "최신 기술과 혁신으로 만드는 안전한 공간",
      items: [
        {
          id: 1,
          title: "자동 소화 시스템",
          description: "최신 기술이 적용된 스마트 소화 시스템",
          date: "2024-04-01",
          category: "제품",
        },
        {
          id: 2,
          title: "화재 감지기",
          description: "고성능 화재 감지 및 경보 시스템",
          date: "2024-03-15",
          category: "제품",
        },
        {
          id: 3,
          title: "소방 펌프",
          description: "신뢰성 높은 소방용 펌프 시스템",
          date: "2024-03-01",
          category: "제품",
        },
      ],
    },
  },
  {
    id: 2,
    icon: <Shield className="w-10 h-10 md:w-12 md:h-12" />,
    title: "안전장비",
    description: "개인 및 산업용 안전 장비",
    link: "/products/safety",
    content: {
      title: "안전장비",
      subtitle: "작업자의 안전을 최우선으로 생각합니다",
      items: [
        {
          id: 1,
          title: "개인보호구",
          description: "고품질 개인 보호 장비",
          date: "2024-04-05",
          category: "제품",
        },
        {
          id: 2,
          title: "안전 시스템",
          description: "통합 안전 관리 시스템",
          date: "2024-03-20",
          category: "제품",
        },
        {
          id: 3,
          title: "작업 안전 장비",
          description: "산업 현장 맞춤형 안전 장비",
          date: "2024-03-10",
          category: "제품",
        },
      ],
    },
  },
  {
    id: 3,
    icon: <AlertTriangle className="w-10 h-10 md:w-12 md:h-12" />,
    title: "방재시스템",
    description: "재난 예방 및 대응 시스템",
    link: "/products/prevention",
    content: {
      title: "방재시스템",
      subtitle: "재난 상황에 대비하는 스마트 방재 솔루션",
      items: [
        {
          id: 1,
          title: "재난 경보 시스템",
          description: "신속한 재난 감지 및 경보",
          date: "2024-04-10",
          category: "제품",
        },
        {
          id: 2,
          title: "대피 유도 시스템",
          description: "효율적인 대피 경로 안내",
          date: "2024-03-25",
          category: "제품",
        },
        {
          id: 3,
          title: "통합 관제 시스템",
          description: "실시간 모니터링 및 대응",
          date: "2024-03-05",
          category: "제품",
        },
      ],
    },
  },
  {
    id: 4,
    icon: <BadgeCheck className="w-10 h-10 md:w-12 md:h-12" />,
    title: "인증현황",
    description: "국내외 안전 인증 현황",
    link: "/company/certification",
    content: {
      title: "인증현황",
      subtitle: "글로벌 기준을 만족하는 품질 인증",
      items: [
        {
          id: 1,
          title: "ISO 9001:2015",
          description: "품질경영시스템 인증",
          date: "2024-01-15",
          category: "인증",
        },
        {
          id: 2,
          title: "CE 인증",
          description: "유럽 안전 기준 충족",
          date: "2023-12-20",
          category: "인증",
        },
        {
          id: 3,
          title: "KFI 인증",
          description: "한국소방산업기술원 인증",
          date: "2023-11-30",
          category: "인증",
        },
      ],
    },
  },
  {
    id: 5,
    icon: <FileText className="w-10 h-10 md:w-12 md:h-12" />,
    title: "기술자료",
    description: "제품 및 기술 문서",
    link: "/support/technical",
    content: {
      title: "기술자료",
      subtitle: "전문적인 기술 정보 및 가이드",
      items: [
        {
          id: 1,
          title: "제품 매뉴얼",
          description: "상세 제품 사용 가이드",
          date: "2024-04-15",
          category: "문서",
        },
        {
          id: 2,
          title: "기술 스펙",
          description: "제품 기술 사양 문서",
          date: "2024-03-30",
          category: "문서",
        },
        {
          id: 3,
          title: "설치 가이드",
          description: "제품 설치 및 유지보수 안내",
          date: "2024-03-15",
          category: "문서",
        },
      ],
    },
  },
  {
    id: 6,
    icon: <Bell className="w-10 h-10 md:w-12 md:h-12" />,
    title: "공지사항",
    description: "회사 소식 및 공지",
    link: "/support/notice",
    content: {
      title: "공지사항",
      subtitle: "서한에프앤씨의 새로운 소식을 전해드립니다",
      items: notices.map(notice => ({
        ...notice,
        description: notice.title,
      })),
    },
  },
]

function formatNumber(num: number): string {
  return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
}

export default function HeroSlider() {
  const [counters, setCounters] = useState<number[]>(stats.map(() => 0))
  const [isHovered, setIsHovered] = useState<boolean>(false)
  const controls = useAnimation()
  const [activeMenu, setActiveMenu] = useState<string | null>(null)
  const [hoveredMenu, setHoveredMenu] = useState<string | null>(null)
  const { theme } = useTheme()
  const [mounted, setMounted] = useState(false)
  
  // 성과지표 활성화 상태 관리
  const [activeStatIndex, setActiveStatIndex] = useState<number | null>(null)
  
  // 마우스 위치 관련 상태 및 모션값
  const mouseX = useMotionValue(0);
  const mouseY = useMotionValue(0);
  const x = useSpring(mouseX, { stiffness: 70, damping: 20 });
  const y = useSpring(mouseY, { stiffness: 70, damping: 20 });
  
  // 호버 상태 관리
  const [hoverSection, setHoverSection] = useState<string | null>(null);
  
  // 줌 효과 관련 모션값
  const scale = useMotionValue(1);
  const targetScale = useMotionValue(1.05);

  // 마우스 움직임 처리 함수
  const handleMouseMove = (e: React.MouseEvent) => {
    const rect = e.currentTarget.getBoundingClientRect();
    
    // 화면 중앙 기준 마우스 위치 계산 (-1 ~ 1 범위)
    const centerX = (e.clientX - rect.left) / rect.width - 0.5;
    const centerY = (e.clientY - rect.top) / rect.height - 0.5;
    
    // 마우스 위치에 따라 이동 효과 적용
    mouseX.set(centerX * -40); // 역방향 이동으로 패럴랙스 효과
    mouseY.set(centerY * -40);
    
    // 마우스 위치에 따른 줌 효과 계산
    const distanceFromCenter = Math.sqrt(centerX * centerX + centerY * centerY);
    const newScale = 1 + (1 - distanceFromCenter) * 0.05;
    targetScale.set(newScale);
    
    // 호버 상태 갱신 - isHovered로 상태 관리
    setIsHovered(true);
  };

  // 섹션 호버 핸들러
  const handleSectionHover = (section: string | null) => {
    setHoverSection(section);
  };

  // 기존 카운터 애니메이션 로직
  const animateCounters = async () => {
    await controls.start({ opacity: 1 })
    
    stats.forEach((stat, index) => {
      let frame = 0
      const totalFrames = 60
      const increment = stat.value / totalFrames

      const animate = () => {
        frame++
        const current = Math.min(Math.ceil(increment * frame), stat.value)
        
        setCounters(prev => {
          const newCounters = [...prev]
          newCounters[index] = current
          return newCounters
        })

        if (frame < totalFrames) {
          requestAnimationFrame(animate)
        }
      }

      requestAnimationFrame(animate)
    })
  }

  useEffect(() => {
    controls.set({ opacity: 0 })
    setCounters(stats.map(() => 0))
    animateCounters()
  }, [])

  // 마운트 상태 확인
  useEffect(() => {
    setMounted(true)
  }, [])

  return (
    <div className="relative w-full min-h-screen overflow-x-hidden overflow-y-auto bg-white dark:bg-neutral-950 ml-0" onMouseMove={handleMouseMove}>
      {/* 배경 */}
      <div className="absolute inset-0 pointer-events-none">
        {/* 기본 배경 색상 */}
        <div className="absolute inset-0 bg-white dark:bg-neutral-900" />
        
        {/* 메인 그라데이션 */}
        <div className="absolute inset-0 bg-gradient-to-br from-blue-50 via-white to-blue-100 dark:from-neutral-900 dark:via-neutral-800 dark:to-neutral-900" />
        
        {/* 히어로 이미지 - 패럴랙스 효과 적용 */}
        <motion.div 
          className="absolute inset-0 z-10"
          style={{ 
            x, 
            y,
            scale: scale 
          }}
        >
          <Image
            src="/hero/hero_01.png"
            alt="Hero Background"
            fill
            className="object-cover object-center opacity-60 dark:opacity-90"
            priority
            sizes="100vw"
          />
        </motion.div>
        
        {/* 오버레이 그라디언트 */}
        <div className="absolute inset-0 z-20">
          {/* 좌우 그라디언트 */}
          <div className="absolute inset-0 bg-gradient-to-r from-white/70 via-white/40 to-white/60 dark:from-neutral-950/70 dark:via-neutral-950/40 dark:to-neutral-950/60" />
          {/* 상하 그라디언트 */}
          <div className="absolute inset-0 bg-gradient-to-b from-white/70 via-white/40 to-white/80 dark:from-neutral-950/70 dark:via-neutral-950/40 dark:to-neutral-950/80" />
          {/* 좌측 그라디언트 - 세로 헤더와 자연스럽게 연결 */}
          <div className="absolute left-0 top-0 bottom-0 w-6 bg-gradient-to-r from-white/90 to-transparent dark:from-black/90 dark:to-transparent" />
        </div>
        
        {/* 모던한 효과 레이어 */}
        <div className="absolute inset-0 z-20 pointer-events-none">
          {/* 그리드 패턴 - 더 정교하게 */}
          <div className="absolute inset-0 opacity-[0.03] dark:opacity-[0.03]">
            <div className="h-full w-full bg-[url('/grid-pattern.svg')] bg-repeat bg-[length:100px_100px]" />
          </div>
          
          {/* 글로우 효과 */}
          <div className="absolute left-0 right-0 top-0 h-10 bg-gradient-to-b from-blue-500/10 to-transparent dark:from-red-500/10 dark:to-transparent blur-xl" />
          <div className="absolute bottom-0 left-0 right-0 h-10 bg-gradient-to-t from-blue-500/10 to-transparent dark:from-red-500/10 dark:to-transparent blur-xl" />
          
          {/* 대각선 패턴 - 비선형적 간격 */}
          <svg className="absolute inset-0 h-full w-full opacity-[0.02] dark:opacity-[0.025]" xmlns="http://www.w3.org/2000/svg">
            <defs>
              <pattern id="dynamic-diagonal" width="200" height="200" patternUnits="userSpaceOnUse">
                {/* 굵은 대각선 */}
                <line x1="0" y1="0" x2="200" y2="200" stroke="black" strokeWidth="1.5" className="dark:stroke-white" />
                <line x1="70" y1="0" x2="200" y2="130" stroke="black" strokeWidth="0.8" className="dark:stroke-white" />
                <line x1="140" y1="0" x2="200" y2="60" stroke="black" strokeWidth="0.5" className="dark:stroke-white" />
                <line x1="0" y1="140" x2="60" y2="200" stroke="black" strokeWidth="0.5" className="dark:stroke-white" />
                
                {/* 반대 방향 대각선 */}
                <line x1="200" y1="0" x2="0" y2="200" stroke="black" strokeWidth="1.5" className="dark:stroke-white" />
                <line x1="200" y1="70" x2="70" y2="200" stroke="black" strokeWidth="0.8" className="dark:stroke-white" />
                <line x1="200" y1="140" x2="140" y2="200" stroke="black" strokeWidth="0.5" className="dark:stroke-white" />
                <line x1="60" y1="0" x2="0" y2="60" stroke="black" strokeWidth="0.5" className="dark:stroke-white" />
              </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#dynamic-diagonal)" />
          </svg>
          
          {/* 호버 효과를 위한 래디얼 그라디언트 */}
          <motion.div 
            className="absolute inset-0 bg-radial-gradient opacity-0 transition-opacity duration-700"
            style={{ 
              opacity: hoverSection === 'main' ? 0.3 : 0,
              background: 'radial-gradient(circle at center, rgba(59, 130, 246, 0.2) 0%, transparent 70%)',
              backgroundImage: mounted ? `radial-gradient(circle at center, ${theme === 'dark' ? 'rgba(255, 60, 0, 0.2)' : 'rgba(59, 130, 246, 0.2)'} 0%, transparent 70%)` : undefined
            }}
          />
        </div>
        
        {/* 호버 감지를 위한 영역 */}
        <div 
          className="absolute inset-0 z-5 grid grid-cols-3 grid-rows-3 pointer-events-none"
          onMouseLeave={() => handleSectionHover(null)}
        >
          {['top-left', 'top-center', 'top-right', 'mid-left', 'main', 'mid-right', 'bottom-left', 'bottom-center', 'bottom-right'].map((section) => (
            <div 
              key={section}
              onMouseEnter={() => handleSectionHover(section)}
              className="w-full h-full"
            />
          ))}
        </div>

        {/* 심플한 대각선 효과 */}
        <motion.div 
          className="absolute inset-0 z-25 pointer-events-none"
                  style={{
            x: useTransform(x, value => value * 0.5),
            y: useTransform(y, value => value * 0.5)
          }}
        >
          <svg className="absolute inset-0 w-full h-full opacity-20" viewBox="0 0 100 100" preserveAspectRatio="none">
            <pattern id="spacedDiagonals" width="20" height="20" patternUnits="userSpaceOnUse" patternTransform="rotate(45)">
              <line x1="0" y1="10" x2="20" y2="10" stroke="url(#diagonalGradient)" strokeWidth="0.8" />
            </pattern>
            <linearGradient id="diagonalGradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#FF3C00" stopOpacity="0.6" />
              <stop offset="100%" stopColor="#FF3C00" stopOpacity="0.3" />
            </linearGradient>
            <rect width="100%" height="100%" fill="url(#spacedDiagonals)" />
          </svg>
        </motion.div>
      </div>

      {/* 메인 컨텐츠 영역 - 메뉴 영역과 겹치지 않게 조정 */}
      <div className="relative w-full min-h-screen z-30 pointer-events-auto flex flex-col pl-20 md:pl-28 lg:pl-32">
        {/* 메인 히어로 섹션 */}
        <div className="relative w-full flex-grow max-w-[1920px] mx-auto px-6 md:px-12 lg:px-16">
          {/* 상단 히어로 섹션 - 헤더와 겹치지 않게 패딩 조정 */}
          <div className="flex flex-col min-h-[40vh] pt-16 md:pt-20 lg:pt-24 mr-0 md:mr-6 lg:mr-10">
            {/* 텍스트 영역 */}
            <div className="flex flex-col justify-center pl-10 md:pl-16 lg:pl-24 max-w-[90%] md:max-w-[70%] lg:max-w-[65%]">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8 }}
                className="relative"
              >
                <h1 className="text-3xl md:text-5xl lg:text-6xl font-bold mb-3 md:mb-4 tracking-tight text-black dark:text-white">
                  Trusted by<br />
                  <span className="bg-gradient-to-r from-blue-500 to-sky-500 dark:from-red-500 dark:to-orange-500 bg-clip-text text-transparent">
                    Global Partners
                  </span>
                </h1>
              </motion.div>
              
              <motion.p
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.2 }}
                className="text-base md:text-lg lg:text-xl text-gray-800 dark:text-gray-200 mb-4 md:mb-5 font-light"
              >
                서한에프앤씨가 만드는 더 안전한 세상
              </motion.p>

              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.4 }}
                className="flex flex-wrap gap-3 mb-4"
              >
                <Link href="/products" className="inline-flex items-center justify-center px-4 py-2 rounded-full bg-blue-600 dark:bg-red-600 text-white hover:bg-blue-700 dark:hover:bg-red-700 transition duration-300 text-sm font-medium">
                  제품 살펴보기
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Link>
                <Link href="/about" className="inline-flex items-center justify-center px-4 py-2 rounded-full bg-white dark:bg-neutral-800 text-black dark:text-white border border-gray-200 dark:border-neutral-700 hover:bg-gray-100 dark:hover:bg-neutral-700 transition duration-300 text-sm font-medium">
                  회사 소개
                </Link>
              </motion.div>
            </div>
          </div>
          
          {/* 탭 인터페이스 - 공지사항, 메뉴 아이템 통합 */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.6 }}
            className="w-full mt-2 mb-4 md:mt-4 md:mb-5 ml-10 md:ml-16 lg:ml-24 mr-6 md:mr-10 lg:mr-16 max-w-[calc(100%-4rem)]"
          >
            {/* 탭 메뉴 */}
            <div className="bg-white/90 dark:bg-neutral-900/90 backdrop-blur-md rounded-t-2xl border border-gray-200 dark:border-gray-800 shadow-sm">
              <div className="flex flex-nowrap overflow-x-auto gap-1 px-2 pt-2 scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-700 scrollbar-track-transparent">
                {[
                  { id: 'notice', title: '공지사항', icon: <div className="h-5 w-5 flex items-center justify-center"><Bell className="h-4 w-4" /></div> },
                  ...menuItems.slice(0, 5).map(item => ({ 
                    id: item.title, 
                    title: item.title, 
                    icon: <div className="h-5 w-5 flex items-center justify-center">{item.icon}</div> 
                  }))
                ].map((tab, index) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveMenu(activeMenu === tab.id ? null : tab.id)}
                    className={`px-3 py-1.5 whitespace-nowrap rounded-t-lg font-medium text-sm flex items-center gap-2 transition-colors
                      ${activeMenu === tab.id 
                        ? 'bg-white dark:bg-neutral-800 text-blue-600 dark:text-red-500 border-t border-l border-r border-gray-200 dark:border-gray-700' 
                        : 'bg-gray-100/50 dark:bg-neutral-800/50 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-neutral-800'}`}
                  >
                    <span className={`${activeMenu === tab.id ? 'text-blue-600 dark:text-red-500' : 'text-gray-500 dark:text-gray-400'}`}>
                      {tab.icon}
                    </span>
                    {tab.title}
                  </button>
                ))}
              </div>
            </div>
            
            {/* 탭 콘텐츠 */}
            <div className="bg-white/95 dark:bg-neutral-900/95 backdrop-blur-md rounded-b-2xl border-x border-b border-gray-200 dark:border-gray-800 shadow-sm overflow-hidden">
              <AnimatePresence mode="wait">
                {activeMenu === 'notice' || activeMenu === null ? (
                  <motion.div
                    key="notice"
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    transition={{ duration: 0.3 }}
                    className="grid grid-cols-1 md:grid-cols-3 gap-4 p-3 md:p-4"
                  >
                    {/* 공지사항 패널 */}
                    <div className="md:col-span-2">
                      <div className="h-full flex flex-col">
                        <div className="flex items-center justify-between mb-2">
                          <h3 className="text-base md:text-lg font-semibold text-gray-900 dark:text-white">최근 공지사항</h3>
                          <Link href="/support/notice" className="text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 flex items-center">
                            더보기
                            <ArrowRight className="ml-1 h-3 w-3" />
                          </Link>
                        </div>

                        {/* 성과지표 - 공지사항과 어울리는 디자인 */}
                        <div className="flex flex-wrap bg-gradient-to-r from-blue-50 to-white dark:from-gray-800/60 dark:to-gray-900/60 rounded-xl mb-3 overflow-hidden">
                          <div className="w-full px-3 py-2 border-b border-gray-100 dark:border-gray-800 flex items-center justify-between">
                            <h4 className="text-xs font-semibold text-blue-600 dark:text-blue-400">글로벌 성과</h4>
                            <div className="text-xs text-gray-500 dark:text-gray-400">2024년 기준</div>
                          </div>
                          <div className="w-full flex flex-wrap p-2">
                            {stats.map((stat, index) => (
                              <div 
                                key={index} 
                                className="w-1/2 md:w-1/4 p-1.5 group relative"
                                onMouseEnter={() => setActiveStatIndex(index)}
                                onMouseLeave={() => setActiveStatIndex(null)}
                              >
                                <div className="flex items-center justify-center relative px-2 py-1.5 rounded-lg bg-white/50 dark:bg-gray-800/50 border border-gray-100 dark:border-gray-700 transition-all group-hover:border-blue-200 dark:group-hover:border-red-900">
                                  <div className="flex flex-col items-center">
                                    <div className="flex items-baseline">
                                      <span className={`text-xl md:text-2xl font-bold bg-gradient-to-r ${stat.gradient} bg-clip-text text-transparent`}>
                                        <CountUp start={0} end={stat.value} duration={2} />
                                      </span>
                                      <span className="text-xs font-semibold text-gray-700 dark:text-gray-300 ml-0.5">
                                        {stat.suffix}
                                      </span>
                                    </div>
                                    <span className="text-[10px] text-gray-600 dark:text-gray-400 text-center mt-0.5 font-medium">
                                      {stat.label}
                                    </span>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>

                        <div className="flex-1 overflow-y-auto max-h-[25vh]">
                          <div className="divide-y divide-gray-100 dark:divide-gray-800">
                            {notices.map((notice) => (
                              <Link 
                                key={notice.id} 
                                href={`/support/notice/${notice.id}`}
                                className="block py-2 px-1 hover:bg-gray-50 dark:hover:bg-neutral-800/50 transition-colors"
                              >
                                <div className="flex justify-between items-start">
                                  <div className="flex-1 min-w-0">
                                    <p className="text-sm font-medium text-gray-900 dark:text-white truncate">{notice.title}</p>
                                    <div className="flex items-center mt-1 gap-2">
                                      <span className="inline-flex items-center rounded-full bg-blue-50 dark:bg-blue-900/20 px-2 py-0.5 text-xs font-medium text-blue-700 dark:text-blue-400">
                                        {notice.category}
                                      </span>
                                      <p className="text-xs text-gray-500 dark:text-gray-400">{notice.date}</p>
                                    </div>
                                  </div>
                                </div>
                              </Link>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* 뉴스/이벤트 배너 */}
                    <div className="h-full max-h-[30vh] md:max-h-full">
                      <div className="bg-gradient-to-br from-blue-500 to-sky-600 dark:from-red-500 dark:to-amber-500 h-full rounded-xl flex flex-col justify-between p-4">
                        <div className="mb-auto">
                          <h3 className="text-lg font-bold text-white mb-2">신제품 발표회</h3>
                          <p className="text-white/90 mb-3 text-sm">2024년 최신 소방 설비 기술을 만나보세요</p>
                          <div className="flex items-center gap-1 text-white/80 text-xs">
                            <Calendar className="w-3.5 h-3.5" />
                            <span>2024-02-20</span>
                          </div>
                        </div>
                        <Link
                          href="/events"
                          className="mt-3 inline-flex items-center justify-center px-3 py-1.5 rounded-full bg-white/20 hover:bg-white/30 text-white border border-white/30 transition duration-300 text-xs font-medium self-start"
                        >
                          자세히 보기
                          <ArrowRight className="ml-1 h-3 w-3" />
                        </Link>
                      </div>
                    </div>
                  </motion.div>
                ) : (
                  menuItems.map((item) => {
                    if (activeMenu === item.title && item.content) {
                      return (
                        <motion.div
                          key={item.title}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -10 }}
                          transition={{ duration: 0.3 }}
                          className="p-3 md:p-4 overflow-x-auto"
                        >
                          <div className="flex items-center justify-between mb-2">
                            <div>
                              <h3 className="text-base md:text-lg font-semibold text-gray-900 dark:text-white flex items-center gap-2">
                                <span className="text-blue-600 dark:text-red-500">{item.icon}</span>
                                {item.content.title}
                              </h3>
                              <p className="text-xs md:text-sm text-gray-700 dark:text-gray-300">{item.content.subtitle}</p>
                            </div>
                            <Link
                              href={item.link}
                              className="px-3 py-1.5 text-xs text-gray-800 dark:text-white/90 hover:text-black dark:hover:text-white transition-colors bg-gray-200/80 dark:bg-white/10 hover:bg-gray-200 dark:hover:bg-white/20 rounded-lg flex items-center gap-2"
                            >
                              바로가기
                              <ArrowRight className="h-3 w-3" />
                            </Link>
                          </div>
                          
                          {/* 인증현황 탭인 경우 인증서 갤러리 추가 */}
                          {item.title === "인증현황" && (
                            <div className="mb-3 overflow-hidden">
                              <div className="bg-gradient-to-r from-blue-50 to-white dark:from-gray-800/60 dark:to-gray-900/60 rounded-xl p-3">
                                <h4 className="text-xs font-semibold text-blue-600 dark:text-blue-400 mb-2">주요 인증서</h4>
                                <div className="relative w-full overflow-hidden">
                                  <div className="animate-scroll flex py-2">
                                    {/* 첫 번째 인증서 세트 */}
                                    {Array.from({ length: 20 }).map((_, index) => (
                                      <div key={`set1-${index}`} className="group relative flex-shrink-0 w-[130px] md:w-[150px] lg:w-[170px] aspect-[3/4] bg-white dark:bg-gray-800 rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700 shadow-sm transition-all hover:shadow-md mx-2">
                                        <div className="absolute inset-0 bg-gradient-to-b from-transparent to-gray-100 dark:to-gray-800 opacity-5"></div>
                                        <Image
                                          src={index < 10 ? `/imgsign/m_3_4_img${index}.jpg` : `/imgsign/m_3_4_img${index}.jpg`}
                                          alt={`인증서 ${index + 1}`}
                                          fill
                                          className="object-cover group-hover:scale-105 transition-transform duration-300"
                                          sizes="(max-width: 768px) 130px, (max-width: 1024px) 150px, 170px"
                                        />
                                        <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-end p-2">
                                          <span className="text-xs text-white truncate w-full text-center font-medium">
                                            인증서 {index + 1}
                                          </span>
                                        </div>
                                      </div>
                                    ))}
                                    {/* 두 번째 인증서 세트 (무한 스크롤 효과를 위해 복제) */}
                                    {Array.from({ length: 20 }).map((_, index) => (
                                      <div key={`set2-${index}`} className="group relative flex-shrink-0 w-[130px] md:w-[150px] lg:w-[170px] aspect-[3/4] bg-white dark:bg-gray-800 rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700 shadow-sm transition-all hover:shadow-md mx-2">
                                        <div className="absolute inset-0 bg-gradient-to-b from-transparent to-gray-100 dark:to-gray-800 opacity-5"></div>
                                        <Image
                                          src={index < 10 ? `/imgsign/m_3_4_img${index}.jpg` : `/imgsign/m_3_4_img${index}.jpg`}
                                          alt={`인증서 ${index + 1}`}
                                          fill
                                          className="object-cover group-hover:scale-105 transition-transform duration-300"
                                          sizes="(max-width: 768px) 130px, (max-width: 1024px) 150px, 170px"
                                        />
                                        <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-end p-2">
                                          <span className="text-xs text-white truncate w-full text-center font-medium">
                                            인증서 {index + 1}
                                          </span>
                                        </div>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              </div>
                            </div>
                          )}
                          
                          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 md:gap-3 mt-3 max-h-[25vh] md:max-h-[30vh] overflow-y-auto">
                            {item.title !== "인증현황" && item.content.items.map((content) => (
                              <Link
                                key={content.id}
                                href={content.link || item.link}
                                className="flex flex-col p-2 md:p-3 hover:bg-gray-50 dark:hover:bg-white/5 transition-colors rounded-lg border border-gray-100 dark:border-gray-800 group"
                              >
                                <p className="text-sm font-medium text-gray-800 dark:text-white/80 group-hover:text-black dark:group-hover:text-white">
                                  {content.title}
                                </p>
                                {content.description && (
                                  <p className="text-xs text-gray-500 dark:text-white/50 mt-1 group-hover:text-gray-700 dark:group-hover:text-white/70">
                                    {content.description}
                                  </p>
                                )}
                                <div className="flex items-center justify-between mt-auto pt-2">
                                  {content.category && (
                                    <span className="text-xs text-gray-500 dark:text-white/50 group-hover:text-gray-700 dark:group-hover:text-white/70 px-2 py-0.5 bg-gray-100 dark:bg-gray-800 rounded-full">
                                      {content.category}
                                    </span>
                                  )}
                                  {content.date && (
                                    <span className="text-xs text-gray-500 dark:text-white/50 whitespace-nowrap group-hover:text-gray-700 dark:group-hover:text-white/70">
                                      {content.date}
                                    </span>
                                  )}
                                </div>
                              </Link>
                            ))}
                          </div>
                        </motion.div>
                      );
                    }
                    return null;
                  })
                )}
              </AnimatePresence>
            </div>
          </motion.div>
        </div>

        {/* 통합된 푸터 */}
        <motion.div 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.8, delay: 1.0 }}
          className="w-full mt-auto z-10 pointer-events-auto"
        >
          <div className="w-full">
            <div className="border-t border-gray-200 dark:border-gray-800 py-2 px-6 md:px-12 lg:px-16 bg-white/95 dark:bg-black/95 backdrop-blur-md ml-10 md:ml-16 lg:ml-24 mr-6 md:mr-10 lg:mr-16">
              <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-2 md:gap-4">
                <div className="flex items-center">
                  <Image 
                    src="/logo03.png" 
                    alt="서한에프앤씨 로고" 
                    width={20} 
                    height={20}
                    className="mr-2"
                  />
                  <span className="text-xs text-gray-600 dark:text-gray-400">
                    &copy; {new Date().getFullYear()} 서한에프앤씨(주) | 대표이사: 윤철구
                  </span>
                </div>
                
                <div className="flex items-center flex-wrap gap-4">
                  <Link href="/privacy" className="text-xs text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200">
                    개인정보처리방침
                  </Link>
                  <span className="text-gray-300 dark:text-gray-700">|</span>
                  <Link href="/terms" className="text-xs text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200">
                    이용약관
                  </Link>
                  <span className="text-gray-300 dark:text-gray-700">|</span>
                  <Link 
                    href="https://www.seohanfnc.com" 
                    target="_blank" 
                    rel="noopener noreferrer" 
                    className="text-xs flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300"
                  >
                    <span>기존 사이트</span>
                    <ArrowRight className="h-3 w-3 ml-1" />
                  </Link>
                </div>
                
                <div className="flex items-center gap-4 md:ml-auto">
                  <Link href="/contact" className="text-xs flex items-center text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200">
                    <Phone className="h-3 w-3 mr-1" />
                    <span>문의하기</span>
                  </Link>
                </div>
              </div>
            </div>
          </div>
        </motion.div>
      </div>
      <style jsx global>{`
        @keyframes scroll {
          0% {
            transform: translateX(0);
          }
          100% {
            transform: translateX(-50%);
          }
        }
        
        .animate-scroll {
          animation: scroll 60s linear infinite;
        }
        
        .animate-scroll:hover {
          animation-play-state: paused;
        }
      `}</style>
    </div>
  )
}


